//	Class Samek_9BQHsmScheme automatically generated by SchemeKotlinCompileVisitor at 2024-11-12 15:56:16
/*
package	com.widget.testhsmkt.implementation;

import	com.widget.testhsmkt.hsm.QHsm;
import	com.widget.testhsmkt.hsm.QEvent;
import	com.widget.testhsmkt.interfaces.ILogger;
import	com.widget.testhsmkt.interfaces.IMediator;

class Samek_9BQHsmScheme(mediator: IMediator?, logger: ILogger?) : QHsm() {

    var logger_: ILogger? = logger
    private val mediator_: IMediator? = mediator

    companion object {
        val INIT: Int = Q_USER_SIG
        val FINAL: Int = Q_USER_SIG + 1
        val b: Int = Q_USER_SIG + 2
        val a: Int = Q_USER_SIG + 3
        val d: Int = Q_USER_SIG + 4
        val h: Int = Q_USER_SIG + 5
        val g: Int = Q_USER_SIG + 6
        val e: Int = Q_USER_SIG + 7
        val c: Int = Q_USER_SIG + 8
        val f: Int = Q_USER_SIG + 9
    }

    protected var	s0State:	QState = object : QState {
        override fun handler(event: QEvent?): QState? {
            when (event?.sig_) {
                Q_ENTRY_SIG -> {
                    mediator_?.execute("s0", event.sig_, event.ticket_)
                    return	null
                }
                Q_EXIT_SIG -> {
                    mediator_?.execute("s0", event.sig_, event.ticket_)
                    return	null
                }
                Q_INIT_SIG -> {
                    mediator_?.execute("s0", event.sig_, event.ticket_)
                    Q_TRAN(s1State);
                    return	null
                }
                e -> {
                    mediator_?.execute("s0", event.sig_, event.ticket_)
                    Q_TRAN(s211State)
                    return	null
                }
            }
            return	top
        }
    }

    override fun init(event: QEvent?) {
        if (event != null) {
            mediator_?.execute("init", event.sig_, 0)
        }
        super.init_tran(s0State);
    }

    protected var	s2State:	QState = object : QState {
        override fun handler(event: QEvent?): QState? {
            when (event?.sig_) {
                Q_ENTRY_SIG -> {
                    mediator_?.execute("s2", event.sig_, event.ticket_)
                    return	null
                }
                Q_EXIT_SIG -> {
                    mediator_?.execute("s2", event.sig_, event.ticket_)
                    return	null
                }
                Q_INIT_SIG -> {
                    mediator_?.execute("s2", event.sig_, event.ticket_)
                    Q_TRAN(s21State);
                    return	null
                }
                c -> {
                    mediator_?.execute("s2", event.sig_, event.ticket_)
                    Q_TRAN(s1State)
                    return	null
                }
                f -> {
                    mediator_?.execute("s2", event.sig_, event.ticket_)
                    Q_TRAN(s11State)
                    return	null
                }
            }
            return	s0State
        }
    }

    protected var	s21State:	QState = object : QState {
        override fun handler(event: QEvent?): QState? {
            when (event?.sig_) {
                Q_ENTRY_SIG -> {
                    mediator_?.execute("s21", event.sig_, event.ticket_)
                    return	null
                }
                Q_EXIT_SIG -> {
                    mediator_?.execute("s21", event.sig_, event.ticket_)
                    return	null
                }
                Q_INIT_SIG -> {
                    mediator_?.execute("s21", event.sig_, event.ticket_)
                    Q_TRAN(s211State);
                    return	null
                }
                b -> {
                    mediator_?.execute("s21", event.sig_, event.ticket_)
                    Q_TRAN(s211State)
                    return	null
                }
                h -> {
                    mediator_?.execute("s21", event.sig_, event.ticket_)
                    Q_TRAN(s21State)
                    return	null
                }
            }
            return	s2State
        }
    }

    protected var	s211State:	QState = object : QState {
        override fun handler(event: QEvent?): QState? {
            when (event?.sig_) {
                Q_ENTRY_SIG -> {
                    mediator_?.execute("s211", event.sig_, event.ticket_)
                    return	null
                }
                Q_EXIT_SIG -> {
                    mediator_?.execute("s211", event.sig_, event.ticket_)
                    return	null
                }
                g -> {
                    mediator_?.execute("s211", event.sig_, event.ticket_)
                    Q_TRAN(s0State)
                    return	null
                }
            }
            return	s21State
        }
    }

    protected var	s1State:	QState = object : QState {
        override fun handler(event: QEvent?): QState? {
            when (event?.sig_) {
                Q_ENTRY_SIG -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    return	null
                }
                Q_EXIT_SIG -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    return	null
                }
                Q_INIT_SIG -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    Q_TRAN(s11State);
                    return	null
                }
                b -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    Q_TRAN(s11State)
                    return	null
                }
                c -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    Q_TRAN(s2State)
                    return	null
                }
                f -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    Q_TRAN(s211State)
                    return	null
                }
                a -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    Q_TRAN(s1State)
                    return	null
                }
                d -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    Q_TRAN(s0State)
                    return	null
                }
            }
            return	s0State
        }
    }

    protected var	s11State:	QState = object : QState {
        override fun handler(event: QEvent?): QState? {
            when (event?.sig_) {
                Q_ENTRY_SIG -> {
                    mediator_?.execute("s11", event.sig_, event.ticket_)
                    return	null
                }
                Q_EXIT_SIG -> {
                    mediator_?.execute("s11", event.sig_, event.ticket_)
                    return	null
                }
                g -> {
                    mediator_?.execute("s11", event.sig_, event.ticket_)
                    Q_TRAN(s211State)
                    return	null
                }
            }
            return	s1State
        }
    }
}

*/

//	Class Samek_9BQHsmScheme automatically generated by SchemeJavaCompileVisitor at 2024-11-06 13:23:31
package com.widget.testhsmkt.implementation

import com.widget.testhsmkt.hsm.QEvent
import com.widget.testhsmkt.hsm.QHsm
import com.widget.testhsmkt.interfaces.ILogger
import com.widget.testhsmkt.interfaces.IMediator

class Samek_9BQHsmScheme(mediator: IMediator?, logger: ILogger?) : QHsm() {
    var logger_: ILogger? = logger
    private val mediator_: IMediator? = mediator

    protected var s0State: QState = object : QState {
        override fun handler(event: QEvent?): QState? {
            when (event?.sig_) {
                Q_ENTRY_SIG -> {
                    mediator_?.execute("s0", event.sig_, event.ticket_)
                    return null
                }

                Q_EXIT_SIG -> {
                    mediator_?.execute("s0", event.sig_, event.ticket_)
                    return null
                }

                Q_INIT_SIG -> {
                    mediator_?.execute("s0", event.sig_, event.ticket_)
                    Q_TRAN(s1State)
                    return null
                }

                e -> {
                    mediator_?.execute("s0", event.sig_, event.ticket_)
                    Q_TRAN(s211State)
                    return null
                }
            }
            return top
        }
    }

    override fun init(event: QEvent?) {
        if (event != null) {
            mediator_?.execute("init", event.sig_, 0)
        }
        super.init_tran(s0State)
    }

    protected var s2State: QState = object : QState {
        override fun handler(event: QEvent?): QState? {
            when (event?.sig_) {
                Q_ENTRY_SIG -> {
                    mediator_?.execute("s2", event.sig_, event.ticket_)
                    return null
                }

                Q_EXIT_SIG -> {
                    mediator_?.execute("s2", event.sig_, event.ticket_)
                    return null
                }

                Q_INIT_SIG -> {
                    mediator_?.execute("s2", event.sig_, event.ticket_)
                    Q_TRAN(s21State)
                    return null
                }

                c -> {
                    if (event != null) {
                        mediator_?.execute("s2", event.sig_, event.ticket_)
                    }
                    Q_TRAN(s1State)
                    return null
                }

                f -> {
                    mediator_?.execute("s2", event.sig_, event.ticket_)
                    Q_TRAN(s11State)
                    return null
                }
            }
            return s0State
        }
    }

    protected var s21State: QState = object : QState {
        override fun handler(event: QEvent?): QState? {
            when (event?.sig_) {
                Q_ENTRY_SIG -> {
                    mediator_?.execute("s21", event.sig_, event.ticket_)
                    return null
                }

                Q_EXIT_SIG -> {
                    mediator_?.execute("s21", event.sig_, event.ticket_)
                    return null
                }

                Q_INIT_SIG -> {
                    mediator_?.execute("s21", event.sig_, event.ticket_)
                    Q_TRAN(s211State)
                    return null
                }

                b -> {
                    mediator_?.execute("s21", event.sig_, event.ticket_)
                    Q_TRAN(s211State)
                    return null
                }

                h -> {
                    mediator_?.execute("s21", event.sig_, event.ticket_)
                    Q_TRAN(this)
                    return null
                }
            }
            return s2State
        }
    }

    protected var s211State: QState = object : QState {
        override fun handler(event: QEvent?): QState? {
            when (event?.sig_) {
                Q_ENTRY_SIG -> {
                    mediator_?.execute("s211", event.sig_, event.ticket_)
                    return null
                }

                Q_EXIT_SIG -> {
                    mediator_?.execute("s211", event.sig_, event.ticket_)
                    return null
                }

                g -> {
                    mediator_?.execute("s211", event.sig_, event.ticket_)
                    Q_TRAN(s0State)
                    return null
                }
            }
            return s21State
        }
    }

    protected var s1State: QState = object : QState {
        override fun handler(event: QEvent?): QState? {
            when (event?.sig_) {
                Q_ENTRY_SIG -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    return null
                }

                Q_EXIT_SIG -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    return null
                }

                Q_INIT_SIG -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    Q_TRAN(s11State)
                    return null
                }

                b -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    Q_TRAN(s11State)
                    return null
                }

                c -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    Q_TRAN(s2State)
                    return null
                }

                f -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    Q_TRAN(s211State)
                    return null
                }

                a -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    Q_TRAN(this)
                    return null
                }

                d -> {
                    mediator_?.execute("s1", event.sig_, event.ticket_)
                    Q_TRAN(s0State)
                    return null
                }
            }
            return s0State
        }
    }

    protected var s11State: QState = object : QState {
        override fun handler(event: QEvent?): QState? {
            when (event?.sig_) {
                Q_ENTRY_SIG -> {
                    mediator_?.execute("s11", event.sig_, event.ticket_)
                    return null
                }

                Q_EXIT_SIG -> {
                    mediator_?.execute("s11", event.sig_, event.ticket_)
                    return null
                }

                g -> {
                    mediator_?.execute("s11", event.sig_, event.ticket_)
                    Q_TRAN(s211State)
                    return null
                }
            }
            return s1State
        }
    }

    companion object {
        //@JvmField
		val INIT: Int = Q_USER_SIG
        val FINAL: Int = Q_USER_SIG + 1
        val b: Int = Q_USER_SIG + 2
        val a: Int = Q_USER_SIG + 3
        val d: Int = Q_USER_SIG + 4
        val h: Int = Q_USER_SIG + 5
        val g: Int = Q_USER_SIG + 6
        val e: Int = Q_USER_SIG + 7
        val c: Int = Q_USER_SIG + 8
        val f: Int = Q_USER_SIG + 9
    }
}

