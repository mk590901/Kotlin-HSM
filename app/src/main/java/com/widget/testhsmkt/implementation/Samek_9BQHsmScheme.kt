//	Class Samek_9BQHsmScheme automatically generated by SchemeKotlinCompileVisitor at 2024-11-17 09:29:33
package	com.widget.testhsmkt.implementation

import	com.widget.testhsmkt.hsm.QHsm
import	com.widget.testhsmkt.hsm.QEvent
import	com.widget.testhsmkt.interfaces.ILogger
import	com.widget.testhsmkt.interfaces.IMediator

class Samek_9BQHsmScheme(mediator: IMediator?, logger: ILogger?) : QHsm() {

	private val logger_: ILogger? = logger
	private val mediator_: IMediator? = mediator

	companion object {
		const val INIT: Int = Q_USER_SIG
		const val FINAL: Int = Q_USER_SIG + 1
		const val b: Int = Q_USER_SIG + 2
		const val a: Int = Q_USER_SIG + 3
		const val d: Int = Q_USER_SIG + 4
		const val h: Int = Q_USER_SIG + 5
		const val g: Int = Q_USER_SIG + 6
		const val e: Int = Q_USER_SIG + 7
		const val c: Int = Q_USER_SIG + 8
		const val f: Int = Q_USER_SIG + 9
	}

	private var	s0State:	QState = object : QState {
		override fun handler(event: QEvent?): QState? {
			when (event?.sig_) {
				Q_ENTRY_SIG -> {
					mediator_?.execute("s0", event.sig_, event.ticket_)
					return	null
				}
				Q_EXIT_SIG -> {
					mediator_?.execute("s0", event.sig_, event.ticket_)
					return	null
				}
				Q_INIT_SIG -> {
					mediator_?.execute("s0", event.sig_, event.ticket_)
					Q_TRAN(s1State)
					return	null
				}
				e -> {
					mediator_?.execute("s0", event.sig_, event.ticket_)
					Q_TRAN(s211State)
					return	null
				}
			}
			return	top
		}
	}

	override fun init(event: QEvent?) {
		if (event != null) {
			mediator_?.execute("init", event.sig_, 0)
		}
		super.init_tran(s0State)
	}

	private var	s2State:	QState = object : QState {
		override fun handler(event: QEvent?): QState? {
			when (event?.sig_) {
				Q_ENTRY_SIG -> {
					mediator_?.execute("s2", event.sig_, event.ticket_)
					return	null
				}
				Q_EXIT_SIG -> {
					mediator_?.execute("s2", event.sig_, event.ticket_)
					return	null
				}
				Q_INIT_SIG -> {
					mediator_?.execute("s2", event.sig_, event.ticket_)
					Q_TRAN(s21State)
					return	null
				}
				c -> {
					mediator_?.execute("s2", event.sig_, event.ticket_)
					Q_TRAN(s1State)
					return	null
				}
				f -> {
					mediator_?.execute("s2", event.sig_, event.ticket_)
					Q_TRAN(s11State)
					return	null
				}
			}
			return	s0State
		}
	}

	private var	s21State:	QState = object : QState {
		override fun handler(event: QEvent?): QState? {
			when (event?.sig_) {
				Q_ENTRY_SIG -> {
					mediator_?.execute("s21", event.sig_, event.ticket_)
					return	null
				}
				Q_EXIT_SIG -> {
					mediator_?.execute("s21", event.sig_, event.ticket_)
					return	null
				}
				Q_INIT_SIG -> {
					mediator_?.execute("s21", event.sig_, event.ticket_)
					Q_TRAN(s211State)
					return	null
				}
				b -> {
					mediator_?.execute("s21", event.sig_, event.ticket_)
					Q_TRAN(s211State)
					return	null
				}
				h -> {
					mediator_?.execute("s21", event.sig_, event.ticket_)
					Q_TRAN(this)
					return	null
				}
			}
			return	s2State
		}
	}

	private var	s211State:	QState = object : QState {
		override fun handler(event: QEvent?): QState? {
			when (event?.sig_) {
				Q_ENTRY_SIG -> {
					mediator_?.execute("s211", event.sig_, event.ticket_)
					return	null
				}
				Q_EXIT_SIG -> {
					mediator_?.execute("s211", event.sig_, event.ticket_)
					return	null
				}
				g -> {
					mediator_?.execute("s211", event.sig_, event.ticket_)
					Q_TRAN(s0State)
					return	null
				}
			}
			return	s21State
		}
	}

	private var	s1State:	QState = object : QState {
		override fun handler(event: QEvent?): QState? {
			when (event?.sig_) {
				Q_ENTRY_SIG -> {
					mediator_?.execute("s1", event.sig_, event.ticket_)
					return	null
				}
				Q_EXIT_SIG -> {
					mediator_?.execute("s1", event.sig_, event.ticket_)
					return	null
				}
				Q_INIT_SIG -> {
					mediator_?.execute("s1", event.sig_, event.ticket_)
					Q_TRAN(s11State)
					return	null
				}
				b -> {
					mediator_?.execute("s1", event.sig_, event.ticket_)
					Q_TRAN(s11State)
					return	null
				}
				c -> {
					mediator_?.execute("s1", event.sig_, event.ticket_)
					Q_TRAN(s2State)
					return	null
				}
				f -> {
					mediator_?.execute("s1", event.sig_, event.ticket_)
					Q_TRAN(s211State)
					return	null
				}
				a -> {
					mediator_?.execute("s1", event.sig_, event.ticket_)
					Q_TRAN(this)
					return	null
				}
				d -> {
					mediator_?.execute("s1", event.sig_, event.ticket_)
					Q_TRAN(s0State)
					return	null
				}
			}
			return	s0State
		}
	}

	private var	s11State:	QState = object : QState {
		override fun handler(event: QEvent?): QState? {
			when (event?.sig_) {
				Q_ENTRY_SIG -> {
					mediator_?.execute("s11", event.sig_, event.ticket_)
					return	null
				}
				Q_EXIT_SIG -> {
					mediator_?.execute("s11", event.sig_, event.ticket_)
					return	null
				}
				g -> {
					mediator_?.execute("s11", event.sig_, event.ticket_)
					Q_TRAN(s211State)
					return	null
				}
			}
			return	s1State
		}
	}
}

